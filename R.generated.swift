//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `login`.
    static let login = _R.storyboard.login()
    /// Storyboard `onboarding`.
    static let onboarding = _R.storyboard.onboarding()
    /// Storyboard `operational`.
    static let operational = _R.storyboard.operational()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "onboarding", bundle: ...)`
    static func onboarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onboarding)
    }
    
    /// `UIStoryboard(name: "operational", bundle: ...)`
    static func operational(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.operational)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try login.validate()
      try onboarding.validate()
      try operational.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "login"
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct onboarding: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let finishOnboardingViewController = StoryboardViewControllerResource<FinishOnboardingViewController>(identifier: "FinishOnboardingViewController")
      let name = "onboarding"
      let onboardingNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "OnboardingNavigationController")
      
      func finishOnboardingViewController(_: Void = ()) -> FinishOnboardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: finishOnboardingViewController)
      }
      
      func onboardingNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingNavigationController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.onboarding().finishOnboardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'finishOnboardingViewController' could not be loaded from storyboard 'onboarding' as 'FinishOnboardingViewController'.") }
        if _R.storyboard.onboarding().onboardingNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingNavigationController' could not be loaded from storyboard 'onboarding' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct operational: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OperationalTabBarController
      
      let bundle = R.hostingBundle
      let chatViewController = StoryboardViewControllerResource<ChatViewController>(identifier: "ChatViewController")
      let meViewController = StoryboardViewControllerResource<MeViewController>(identifier: "MeViewController")
      let name = "operational"
      let operationalTabBarController = StoryboardViewControllerResource<OperationalTabBarController>(identifier: "OperationalTabBarController")
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      
      func chatViewController(_: Void = ()) -> ChatViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatViewController)
      }
      
      func meViewController(_: Void = ()) -> MeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: meViewController)
      }
      
      func operationalTabBarController(_: Void = ()) -> OperationalTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: operationalTabBarController)
      }
      
      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.operational().chatViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatViewController' could not be loaded from storyboard 'operational' as 'ChatViewController'.") }
        if _R.storyboard.operational().meViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'meViewController' could not be loaded from storyboard 'operational' as 'MeViewController'.") }
        if _R.storyboard.operational().operationalTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'operationalTabBarController' could not be loaded from storyboard 'operational' as 'OperationalTabBarController'.") }
        if _R.storyboard.operational().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'operational' as 'ProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
